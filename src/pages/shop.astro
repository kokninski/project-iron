---
<<<<<<< HEAD
import { getCollection } from 'astro:content';
=======
import { getCollection, getEntry } from 'astro:content';
import FeaturedProducts from '../components/FeaturedProducts.astro';
>>>>>>> feat-featured-product
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import ProductCard from '../components/ProductCard.astro';
import BaseLayout from '../layouts/BaseLayout.astro';

const products = await getCollection('products');

let featuredData = null;
try {
  const fp = await getEntry('featured', 'featured_products');
  featuredData = fp?.data ?? null;
} catch {}

let featuredResolved = [];
if (featuredData?.enabled) {
  featuredResolved = (featuredData.items ?? [])
    .map(item => {
      const product = products.find(p => p.slug === item.slug);
      if (!product) {
        if (import.meta.env.DEV) {
          // eslint-disable-next-line no-console
          console.warn(`Nie znaleziono produktu o slug: ${item.slug} w kolekcji products.`);
        }
        return null;
      }
      return {
        product,
        badge: item.badge,
        priceOverridePLN: item.priceOverridePLN,
        ctaLabel: item.ctaLabel,
      };
    })
    .filter(Boolean);
}

const featuredSlugs = new Set(featuredResolved.map(i => i.product.slug));
const productsFiltered = products.filter(p => !featuredSlugs.has(p.slug));
---

<BaseLayout>
  <Header />
  <main class="container mx-auto py-16">
    <h1 class="text-heading text-4xl font-bold mb-8">Sklep</h1>
<<<<<<< HEAD
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-8 justify-center">
      {
        products.map(product => (
=======
    {
      featuredResolved.length > 0 && (
        <FeaturedProducts
          title={featuredData.title}
          subtitle={featuredData.subtitle}
          items={featuredResolved}
        />
      )
    }
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-8 justify-center">
      {
        productsFiltered.map(product => (
>>>>>>> feat-featured-product
          <div class="w-full max-w-xs h-full mx-auto flex">
            <ProductCard
              image={product.data.photo}
              name={product.data.name}
              pricePLN={product.data.pricePLN}
              stripeUrl={product.data.stripeLink}
            />
          </div>
        ))
      }
    </div>
    <div class="mt-10 p-4 bg-steel/10 rounded-lg text-steel text-sm max-w-xl mx-auto">
      <strong>Wysyłka:</strong> Koszt wysyłki jest stały i skonfigurowany w Stripe. Szczegóły oraz opcje
      dostawy pojawią się podczas finalizacji zakupu.
    </div>
  </main>
  <Footer />
</BaseLayout>
