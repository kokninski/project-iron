---
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import BaseLayout from '../layouts/BaseLayout.astro';

// Get Turnstile site key from environment
const turnstileSiteKey = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY;
---

<BaseLayout>
  <Header />
  <main class="container mx-auto py-16">
    <h1 class="text-heading text-4xl font-bold mb-8">Kontakt</h1>
    <form id="contact-form" class="space-y-6 max-w-xl mx-auto" novalidate>
      <div>
        <label for="name" class="block font-semibold mb-1">Imię i nazwisko *</label>
        <input
          id="name"
          name="name"
          type="text"
          required
          class="input w-full rounded-lg"
          autocomplete="name"
        />
      </div>
      <div>
        <label for="email" class="block font-semibold mb-1">E-mail *</label>
        <input
          id="email"
          name="email"
          type="email"
          required
          class="input w-full rounded-lg"
          autocomplete="email"
        />
      </div>
      <div>
        <label for="phone" class="block font-semibold mb-1">Telefon</label>
        <input
          id="phone"
          name="phone"
          type="tel"
          class="input w-full rounded-lg"
          autocomplete="tel"
        />
      </div>
      <div>
        <label for="message" class="block font-semibold mb-1">Wiadomość *</label>
        <textarea id="message" name="message" required rows="5" class="input w-full rounded-lg"
        ></textarea>
      </div>
      <div class="flex items-start gap-2">
        <input id="consent" name="consent" type="checkbox" required class="mt-1" />
        <label for="consent" class="text-sm"
          >Wyrażam zgodę na przetwarzanie danych osobowych zgodnie z <a
            href="/legal/privacy"
            class="text-accent underline"
            target="_blank">Polityką prywatności</a
          > *</label
        >
      </div>
      <div class="cf-turnstile" data-sitekey={turnstileSiteKey}></div>
      <button type="submit" class="btn btn-primary w-full rounded-lg">
        <span class="submit-text">Wyślij wiadomość</span>
        <span class="loading-text hidden">Wysyłanie...</span>
      </button>
      <div id="form-status" class="mt-4 text-center text-base font-semibold" aria-live="polite">
      </div>
    </form>
  </main>
  <Footer />
</BaseLayout>
<script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>

<script>
  const form = document.getElementById('contact-form');
  const submitButton = form?.querySelector('button[type="submit"]') as HTMLButtonElement | null;
  const formStatus = document.getElementById('form-status');

  if (form && submitButton && formStatus) {
    form.addEventListener('submit', async event => {
      event.preventDefault();
      // Log to console
      console.log(
        'Form submitted:',
        Object.fromEntries(new FormData(form as HTMLFormElement).entries()),
      );

      // Clear previous status
      formStatus.textContent = '';

      // Disable button and show loading state
      submitButton.disabled = true;
      submitButton.querySelector('.submit-text')?.classList.add('hidden');
      submitButton.querySelector('.loading-text')?.classList.remove('hidden');

      // Collect form data
      const formData = new FormData(form as HTMLFormElement);
      const data = Object.fromEntries(formData.entries());
      const turnstileResponse = (
        document.querySelector('.turnstile-response') as HTMLInputElement | null
      )?.value;

      if (turnstileResponse) {
        data['cf-turnstile-response'] = turnstileResponse;
      }

      try {
        const response = await fetch('/contact', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });

        if (response.ok) {
          formStatus.textContent = 'Wiadomość została wysłana pomyślnie!';
          formStatus.classList.add('text-success');
          (form as HTMLFormElement).reset();
        } else {
          const error = await response.json();
          formStatus.textContent = error.message || 'Wystąpił błąd podczas wysyłania wiadomości.';
          formStatus.classList.add('text-error');
        }
      } catch (error) {
        formStatus.textContent = 'Nie udało się nawiązać połączenia. Spróbuj ponownie później.';
      } finally {
        // Re-enable button after 10 seconds
        setTimeout(() => {
          submitButton.disabled = false;
        }, 10000);

        // Reset loading state
        submitButton.querySelector('.submit-text')?.classList.remove('hidden');
        submitButton.querySelector('.loading-text')?.classList.add('hidden');
      }
    });
  }
</script>
