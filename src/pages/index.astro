---

import FeaturedBuildCard from '../components/FeaturedBuildCard.astro';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import Hero from '../components/Hero.astro';
import ProcessSteps from '../components/ProcessSteps.astro';
import TestimonialCard from '../components/TestimonialCard.astro';
import USPStrip from '../components/USPStrip.astro';
import BaseLayout from '../layouts/BaseLayout.astro';
import { buildJsonLd, ogImage } from '../lib/seo';

// Removed duplicate import of CollectionEntry
import { getCollection, getEntry, type CollectionEntry } from 'astro:content';


const home = await getEntry('home', 'index');
const data = home?.data;

console.log('Home data:', data);

const builds = await getCollection('builds');
const featured: CollectionEntry<'builds'> | undefined = data ? builds.find(b => b.slug === data.featuredBuild.slug) : undefined;
if (!featured && data?.featuredBuild?.slug) console.warn('Featured build not found:', data.featuredBuild.slug);

let latestPosts: CollectionEntry<'posts'>[] = [];
if (data?.latestBlog?.enabled) {
  const posts = await getCollection('posts');
  latestPosts = posts
    .map(p => ({ ...p, _date: (typeof p.data.date === 'string' ? new Date(p.data.date) : p.data.date as Date) }))
    .filter(p => p._date instanceof Date && !isNaN(Number(p._date)))
    .sort((a, b) => (b._date as Date).getTime() - (a._date as Date).getTime())
    .slice(0, data.latestBlog.limit);
}

const processSteps = [
  { icon: 'üí°', title: 'Pomys≈Ç', description: 'Wsp√≥lnie omawiamy TwojƒÖ wizjƒô i potrzeby.' },
  { icon: '‚úèÔ∏è', title: 'Projekt', description: 'Tworzymy indywidualny projekt i dobieramy materia≈Çy.' },
  { icon: '‚öíÔ∏è', title: 'Budowa', description: 'Rƒôcznie wykonujemy ka≈ºdy element z dba≈Ço≈õciƒÖ o detale.' },
  { icon: 'üß™', title: 'Testy', description: 'Sprawdzamy jako≈õƒá i bezpiecze≈Ñstwo gotowego choppera.' },
  { icon: 'üöö', title: 'Dostawa', description: 'Dostarczamy gotowy motocykl pod wskazany adres.' },
];

const orgJsonLd = buildJsonLd('Organization', {
  name: 'Project Iron',
  url: 'https://YOUR_DOMAIN',
  logo: '/favicon.svg',
  sameAs: [
	'https://facebook.com/',
	'https://instagram.com/',
	'https://x.com/',
	'https://youtube.com/'
  ],
  address: {
	'@type': 'PostalAddress',
	streetAddress: 'ul. Przyk≈Çadowa 123',
	addressLocality: 'Warszawa',
	postalCode: '00-000',
	addressCountry: 'PL',
  },
});

const localBusinessJsonLd = buildJsonLd('LocalBusiness', {
  name: 'Project Iron',
  image: '/favicon.svg',
  '@id': 'https://YOUR_DOMAIN',
  url: 'https://YOUR_DOMAIN',
  telephone: '+48 123 456 789',
  address: {
    '@type': 'PostalAddress',
    streetAddress: 'ul. Przyk≈Çadowa 123',
    addressLocality: 'Warszawa',
    postalCode: '00-000',
    addressCountry: 'PL',
  },
  priceRange: '$$$',
  geo: {
    '@type': 'GeoCoordinates',
    latitude: '52.2297',
    longitude: '21.0122',
  },
});

---

<BaseLayout seo={{
  title: 'Rƒôcznie budowane choppery z Polski',
  description: 'Indywidualne motocykle na zam√≥wienie. Poznaj nasz proces, zobacz realizacje i opinie klient√≥w.',
  ogImage: ogImage('/images/hero-bg.jpg'),
}}>
  <Header />
  <Hero
    headline={data.hero.title}
    subhead={data.hero.subtitle}
    primaryCta={data.hero.primaryCta}
    secondaryCta={data.hero.secondaryCta}
  >
    <img slot="bg" src={data.hero.backgroundImage} alt={data.hero.title} class="w-full h-full object-cover" />
  </Hero>
  <USPStrip features={[
    { icon: '‚ö°', title: 'Szybko≈õƒá', description: 'Realizacje w kr√≥tkim terminie.' },
    { icon: 'üé®', title: 'Design', description: 'Nowoczesne wzornictwo.' },
    { icon: 'üîí', title: 'Bezpiecze≈Ñstwo', description: 'Solidno≈õƒá i trwa≈Ço≈õƒá.' },
    { icon: 'ü§ù', title: 'Wsp√≥≈Çpraca', description: 'Indywidualne podej≈õcie.' },
  ]} />
  {featured && (
    <section class="py-16">
      <div class="container mx-auto">
        <FeaturedBuildCard
          images={featured.data.photos?.map(src => ({ src })) ?? []}
          title={featured.data.name}
          specs={featured.data.specs?.map(s => ({ label: s })) ?? []}
          testimonial={data?.featuredBuild?.testimonial ? { quote: data.featuredBuild.testimonial, author: data.featuredBuild.author } : featured.data.clientTestimonial}
        />
      </div>
    </section>
  )}
  <ProcessSteps steps={processSteps} />
  {Array.isArray(data?.testimonials) && data.testimonials.length > 0 && (
    <section class="py-16 bg-steel/10">
      <div class="container mx-auto grid md:grid-cols-3 gap-8">
        {data.testimonials.map((t: any) => (<TestimonialCard {...t} />))}
      </div>
    </section>
  )}
  {data?.ctaBand && (
    <section class="py-16 bg-accent text-offwhite text-center">
      <div class="container mx-auto">
        <h2 class="text-heading text-3xl font-bold mb-4">{data.ctaBand.text}</h2>
        <a href={data.ctaBand.primaryCta.href} class="btn btn-offwhite text-accent text-lg px-8 py-4 font-semibold">{data.ctaBand.primaryCta.label}</a>
      </div>
    </section>
  )}
  {/* Latest Blog section (optional, only if enabled and posts exist) */}
  {data?.latestBlog?.enabled && latestPosts.length > 0 && (
    <section class="py-16 bg-offwhite">
      <div class="container mx-auto">
        <h2 class="text-heading text-2xl font-bold mb-8">Najnowsze wpisy</h2>
        <div class="grid md:grid-cols-3 gap-8">
          {latestPosts.map(post => (
            <div class="card card-hover p-6">
              <img src={post.data.coverImage} alt={post.data.title} class="w-full h-48 object-cover rounded mb-4" />
              <h3 class="text-xl font-semibold mb-2">{post.data.title}</h3>
              <p class="text-body text-steel mb-4">{post.data.excerpt}</p>
              <a href={post.slug ? `/blog/${post.slug}` : '#'} class="btn btn-primary">Czytaj wiƒôcej</a>
            </div>
          ))}
        </div>
      </div>
    </section>
  )}
  <Footer />
  <script type="application/ld+json">{JSON.stringify(orgJsonLd)}</script>
  <script type="application/ld+json">{JSON.stringify(localBusinessJsonLd)}</script>
</BaseLayout>
