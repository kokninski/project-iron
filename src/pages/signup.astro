---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<BaseLayout seo={{ title: 'Rejestracja - Project Iron' }}>
  <Header />
  <main class="container mx-auto py-16 max-w-md">
    <div class="bg-white rounded-lg shadow-lg p-8">
      <h1 class="text-heading text-3xl font-bold mb-2 text-center">Rejestracja</h1>
      <p class="text-body text-steel mb-8 text-center">
        Złóż wniosek o członkostwo w Project Iron
      </p>
      
      <div id="error-message" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
      </div>
      
      <div id="success-message" class="hidden bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
      </div>
      
      <form id="signup-form" class="space-y-6">
        <div>
          <label for="username" class="block text-sm font-medium text-charcoal mb-1">
            Nazwa użytkownika *
          </label>
          <input
            id="username"
            name="username"
            type="text"
            required
            minlength="3"
            maxlength="50"
            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-accent focus:border-accent"
            placeholder="Wprowadź nazwę użytkownika"
          />
          <p class="text-xs text-steel mt-1">Minimum 3 znaki, tylko litery, cyfry i podkreślenia</p>
        </div>
        
        <div>
          <label for="email" class="block text-sm font-medium text-charcoal mb-1">
            Adres email *
          </label>
          <input
            id="email"
            name="email"
            type="email"
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-accent focus:border-accent"
            placeholder="Wprowadź adres email"
          />
        </div>
        
        <div>
          <label for="password" class="block text-sm font-medium text-charcoal mb-1">
            Hasło *
          </label>
          <input
            id="password"
            name="password"
            type="password"
            required
            minlength="6"
            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-accent focus:border-accent"
            placeholder="Wprowadź hasło"
          />
          <p class="text-xs text-steel mt-1">Minimum 6 znaków</p>
        </div>
        
        <div>
          <label for="confirmPassword" class="block text-sm font-medium text-charcoal mb-1">
            Potwierdź hasło *
          </label>
          <input
            id="confirmPassword"
            name="confirmPassword"
            type="password"
            required
            minlength="6"
            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-accent focus:border-accent"
            placeholder="Potwierdź hasło"
          />
        </div>
        
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div class="flex">
            <svg class="w-5 h-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
            </svg>
            <div class="text-sm text-blue-700">
              <p class="font-medium mb-1">Ważne informacje:</p>
              <ul class="space-y-1 text-xs">
                <li>• Twoje konto będzie nieaktywne do czasu zatwierdzenia przez administratora</li>
                <li>• Otrzymasz powiadomienie email po zatwierdzeniu konta</li>
                <li>• Proces zatwierdzenia może potrwać do 2 dni roboczych</li>
              </ul>
            </div>
          </div>
        </div>
        
        <button
          type="submit"
          class="w-full bg-accent text-white font-medium py-2 px-4 rounded-md hover:bg-accent/90 focus:outline-none focus:ring-2 focus:ring-accent focus:ring-offset-2 transition-colors"
          id="signup-button"
        >
          Złóż wniosek o członkostwo
        </button>
      </form>
      
      <div class="mt-6 text-center">
        <p class="text-sm text-steel">
          Masz już konto? 
          <a href="/login" class="text-accent hover:underline font-medium">Zaloguj się</a>
        </p>
      </div>
    </div>
  </main>
  <Footer />
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Check if user is already logged in
    const isLoggedIn = localStorage.getItem('auth_user');
    if (isLoggedIn) {
      window.location.href = '/private';
      return;
    }

    const form = document.getElementById('signup-form') as HTMLFormElement;
    const errorDiv = document.getElementById('error-message') as HTMLElement;
    const successDiv = document.getElementById('success-message') as HTMLElement;
    const signupButton = document.getElementById('signup-button') as HTMLButtonElement;
    
    function showError(message: string) {
      errorDiv.textContent = message;
      errorDiv.classList.remove('hidden');
      successDiv.classList.add('hidden');
    }
    
    function showSuccess(message: string) {
      successDiv.textContent = message;
      successDiv.classList.remove('hidden');
      errorDiv.classList.add('hidden');
    }
    
    function hideMessages() {
      errorDiv.classList.add('hidden');
      successDiv.classList.add('hidden');
    }
    
    function setLoading(isLoading: boolean) {
      signupButton.disabled = isLoading;
      signupButton.textContent = isLoading ? 'Rejestracja...' : 'Złóż wniosek o członkostwo';
    }
    
    // Username validation
    const usernameInput = document.getElementById('username') as HTMLInputElement;
    usernameInput.addEventListener('input', function() {
      const username = this.value;
      const isValid = /^[a-zA-Z0-9_]+$/.test(username) && username.length >= 3;
      if (username && !isValid) {
        this.setCustomValidity('Nazwa użytkownika może zawierać tylko litery, cyfry i podkreślenia');
      } else {
        this.setCustomValidity('');
      }
    });
    
    // Password confirmation validation
    const passwordInput = document.getElementById('password') as HTMLInputElement;
    const confirmPasswordInput = document.getElementById('confirmPassword') as HTMLInputElement;
    
    function validatePasswordMatch() {
      const password = passwordInput.value;
      const confirmPassword = confirmPasswordInput.value;
      
      if (confirmPassword && password !== confirmPassword) {
        confirmPasswordInput.setCustomValidity('Hasła nie są identyczne');
      } else {
        confirmPasswordInput.setCustomValidity('');
      }
    }
    
    passwordInput.addEventListener('input', validatePasswordMatch);
    confirmPasswordInput.addEventListener('input', validatePasswordMatch);
    
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      hideMessages();
      setLoading(true);
      
      const formData = new FormData(form);
      const username = formData.get('username') as string;
      const email = formData.get('email') as string;
      const password = formData.get('password') as string;
      const confirmPassword = formData.get('confirmPassword') as string;
      
      // Client-side validation
      if (password !== confirmPassword) {
        showError('Hasła nie są identyczne');
        setLoading(false);
        return;
      }
      
      if (password.length < 6) {
        showError('Hasło musi mieć co najmniej 6 znaków');
        setLoading(false);
        return;
      }
      
      if (!/^[a-zA-Z0-9_]+$/.test(username)) {
        showError('Nazwa użytkownika może zawierać tylko litery, cyfry i podkreślenia');
        setLoading(false);
        return;
      }
      
      try {
        const response = await fetch('/signup', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ username, email, password }),
        });
        
        const data = await response.json();
        
        if (data.success) {
          showSuccess(data.message || 'Wniosek o członkostwo został złożony. Oczekuj na zatwierdzenie przez administratora.');
          form.reset();
        } else {
          showError(data.message || 'Błąd podczas rejestracji');
        }
      } catch (error) {
        console.error('Signup error:', error);
        showError('Błąd połączenia. Spróbuj ponownie.');
      } finally {
        setLoading(false);
      }
    });
  });
</script>